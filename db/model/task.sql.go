// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    username, title, description, due_date, priority
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, username, title, description, due_date, priority, created_at
`

type CreateTaskParams struct {
	Username    string         `json:"username"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	DueDate     sql.NullTime   `json:"due_date"`
	Priority    sql.NullInt32  `json:"priority"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.createTaskStmt, createTask,
		arg.Username,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Priority,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Priority,
		&i.CreatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, username, title, description, due_date, priority, created_at FROM tasks
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetTasks(ctx context.Context, username string) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksStmt, getTasks, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.Priority,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
